<?php

// namespace Mtdowling\Supervisor;

/**
 * Wrapper for the Supervisor event notification protocol
 *
 * @author Michael Dowling <mtdowling@gmail.com>
 */
class EventNotification
{
    const PROCESS_STATE = 'PROCESS_STATE';
    const PROCESS_STATE_STARTING = 'PROCESS_STATE_STARTING';
    const PROCESS_STATE_RUNNING = 'PROCESS_STATE_RUNNING';
    const PROCESS_STATE_BACKOFF = 'PROCESS_STATE_BACKOFF';
    const PROCESS_STATE_STOPPING = 'PROCESS_STATE_STOPPING';
    const PROCESS_STATE_EXITED = 'PROCESS_STATE_EXITED';
    const PROCESS_STATE_STOPPED = 'PROCESS_STATE_STOPPED';
    const PROCESS_STATE_FATAL = 'PROCESS_STATE_FATAL';
    const PROCESS_STATE_UNKNOWN = 'PROCESS_STATE_UNKNOWN';
    const REMOTE_COMMUNICATION = 'REMOTE_COMMUNICATION';
    const PROCESS_LOG = 'PROCESS_LOG';
    const PROCESS_LOG_STDOUT = 'PROCESS_LOG_STDOUT';
    const PROCESS_LOG_STDERR = 'PROCESS_LOG_STDERR';
    const PROCESS_COMMUNICATION = 'PROCESS_COMMUNICATION';
    const PROCESS_COMMUNICATION_STDOUT = 'PROCESS_COMMUNICATION_STDOUT';
    const PROCESS_COMMUNICATION_STDERR = 'PROCESS_COMMUNICATION_STDERR';
    const SUPERVISOR_STATE_CHANGE = 'SUPERVISOR_STATE_CHANGE';
    const SUPERVISOR_STATE_CHANGE_RUNNING = 'SUPERVISOR_STATE_CHANGE_RUNNING';
    const SUPERVISOR_STATE_CHANGE_STOPPING = 'SUPERVISOR_STATE_CHANGE_STOPPING';
    const TICK = 'TICK';
    const TICK_5 = 'TICK_5';
    const TICK_60 = 'TICK_60';
    const TICK_3600 = 'TICK_3600';

    /**
     * @var string Event header string
     */
    protected $headers;

    /**
     * @var array Parsed data
     */
    protected $data = array();

    /**
     * @var string Payload body
     */
    protected $body;

    /**
     * @var string Raw data sent in the notification
     */
    protected $raw;

    /**
     * Parse a colon and space separated string into an array
     *
     * @param string $data Data to parse
     *
     * @return array
     */
    public static function parseData($data)
    {
        $parsed = array();
        foreach (explode(' ', $data) as $pair) {
            if (strpos($pair, ':') > 0) {
                list($key, $value) = array_map('trim', explode(':', $pair));
                $parsed[$key] = $value;
            }
        }

        return $parsed;
    }

    /**
     * Constructor
     *
     * @param string $input Raw input headers from Supervisor
     * @param string $body Raw body of the event
     * @param array $headers (optional) Parsed event headers
     */
    public function __construct($input, $body, array $headers = null)
    {
        $this->headers = $input;
        $this->body = $body;
        $this->raw = $input . "\n" . $body;
        $parts = explode("\n", $body);
        $this->data = $headers ? $headers : self::parseData($headers);
        $this->data = array_merge((array) $headers, self::parseData($parts[0]));
        if (isset($parts[1])) {
            $this->body = implode("\n", array_slice($parts, 1));
        }
    }

    /**
     * Convert the notification to a string
     *
     * @return string
     */
    public function __toString()
    {
        return $this->raw;
    }

    /**
     * The event system protocol version (e.g. 3.0)
     *
     * @return string
     */
    public function getVer()
    {
        return isset($this->data['ver']) ? $this->data['ver'] : null;
    }

    /**
     * The identifier of the supervisord sending the event (see config file
     * [supervisord] section identifier value.
     *
     * @return string
     */
    public function getServer()
    {
        return isset($this->data['server']) ? $this->data['server'] : null;
    }

    /**
     * An integer assigned to each event. No two events generated during the
     * lifetime of a supervisord process will have the same serial number. The
     * value is useful for functional testing and detecting event ordering
     * anomalies.
     *
     * @return string
     */
    public function getSerial()
    {
        return isset($this->data['serial']) ? $this->data['serial'] : null;
    }

    /**
     * The name of the event listener pool which generated this event.
     *
     * @return string
     */
    public function getPool()
    {
        return isset($this->data['pool']) ? $this->data['pool'] : null;
    }

    /**
     * An integer assigned to each event by the eventlistener pool which it is
     * being sent from. No two events generated by the same eventlister pool
     * during the lifetime of a supervisord process will have the same
     * poolserial number. This value can be used to detect event ordering
     * anomalies. (e.g. 30)
     *
     * @return string
     */
    public function getPoolSerial()
    {
        return isset($this->data['poolserial']) ? $this->data['poolserial'] : null;
    }

    /**
     * The specific event type name (see Event Types) (e.g. TICK_5)
     *
     * @return string
     */
    public function getEventName()
    {
        return isset($this->data['eventname']) ? $this->data['eventname'] : null;
    }

    /**
     * An integer indicating the number of bytes in the event payload, aka the
     * PAYLOAD_LENGTH
     *
     * @return string
     */
    public function getLen()
    {
        return isset($this->data['len']) ? $this->data['len'] : null;
    }

    /**
     * Get the body of the Supervisord notificaiton
     *
     * @return string
     */
    public function getBody()
    {
        return $this->body;
    }

    /**
     * Get Misc event data
     *
     * @param string $key (optional) Key to get
     *
     * @return string|null
     */
    public function getData($key = null)
    {
        if ($key) {
            return isset($this->data[$key]) ? $this->data[$key] : null;
        }

        return $this->data;
    }
}
